import argparse
from banco import salvar_sugestao, listar_sugestoes, registrar_aposta, salvar_resultado_sorteio, conferir_apostas
from predicao import predicao_supervisionada, predicao_frequencia, predicao_clustering
from dados import carregar_dados

def executar_testes(sorteio_inicio, quantidade_sorteios, metodo_escolhido, modelo_supervisionado, num_clusters):
    """
    Executa testes de predi√ß√£o e salva os resultados no banco.

    Par√¢metros:
      - sorteio_inicio: N√∫mero do sorteio inicial para predi√ß√£o.
      - quantidade_sorteios: Quantidade de sorteios que ser√£o simulados.
      - metodo_escolhido: M√©todo de predi√ß√£o escolhido ('supervisionada', 'frequencia', 'clustering' ou 'todos').
      - modelo_supervisionado: Tipo de modelo supervisionado a ser usado ('RandomForest' ou 'MLP').
      - num_clusters: N√∫mero de clusters a ser usado no m√©todo de Clustering.
    """
    df = carregar_dados("data/Lotofacil.xlsx")
    if df is None:
        print("Erro ao carregar os dados!")
        return
    
    for i in range(quantidade_sorteios):
        sorteio_atual = sorteio_inicio + i
        df_treino = df[df["Concurso"] < sorteio_atual]  # Usa apenas sorteios anteriores
        resultado_real = df[df["Concurso"] == sorteio_atual]

        if resultado_real.empty:
            continue

        numeros_sorteados = resultado_real.iloc[0][[f"Bola{i}" for i in range(1, 16)]].tolist()

        predicoes = {}

        # Aplica√ß√£o do m√©todo de predi√ß√£o escolhido
        if metodo_escolhido in ["supervisionada", "todos"]:
            predicoes["supervisionada"] = predicao_supervisionada(df_treino, modelo_escolhido=modelo_supervisionado)
        
        if metodo_escolhido in ["frequencia", "todos"]:
            predicoes["frequencia"] = predicao_frequencia(df_treino)
        
        if metodo_escolhido in ["clustering", "todos"]:
            predicoes["clustering"] = predicao_clustering(df_treino, num_clusters=num_clusters)

        # Salvar sugest√µes no banco
        for metodo, predicao in predicoes.items():
            salvar_sugestao(predicao)
            print(f"\nüîπ Sorteio {sorteio_atual} - M√©todo {metodo}")
            print(f"   üî¢ Predi√ß√£o: {predicao}")
            print(f"   üé≤ N√∫meros Sorteados: {numeros_sorteados}")

            # Conferir apostas no banco e salvar resultado
            id_sugestao = listar_sugestoes()[-1][0]
            registrar_aposta(id_sugestao=id_sugestao, sorteio=sorteio_atual)
            salvar_resultado_sorteio(sorteio_atual, numeros_sorteados)
            resultado_aposta = conferir_apostas(sorteio_atual)
            print(f"   ‚úÖ Acertos na aposta: {resultado_aposta}")

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="Teste de predi√ß√£o no banco")

    parser.add_argument("--sorteio_inicio", type=int, default=1000, help="Sorteio inicial para predi√ß√£o")
    parser.add_argument("--quantidade_sorteios", type=int, default=10, help="Quantidade de sorteios a testar")
    parser.add_argument("--metodo", type=str, choices=["supervisionada", "frequencia", "clustering", "todos"], default="todos", help="M√©todo de predi√ß√£o")
    parser.add_argument("--modelo_supervisionado", type=str, choices=["RandomForest", "MLP"], default="RandomForest", help="Modelo supervisionado a ser usado")
    parser.add_argument("--num_clusters", type=int, default=5, help="N√∫mero de clusters para o m√©todo de Clustering")

    args = parser.parse_args()
    executar_testes(args.sorteio_inicio, args.quantidade_sorteios, args.metodo, args.modelo_supervisionado, args.num_clusters)